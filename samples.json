{
  "javascript": {
    "readAPIVersions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi');",
    "readAccountInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}`);",
    "listCompanyActiveCalls": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/active-calls`, listCompanyActiveCallsParameters);",
    "createCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/answering-rule`, companyAnsweringRuleRequest);",
    "listCompanyAnsweringRules": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/answering-rule`);",
    "readCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/answering-rule/${ruleId}`);",
    "updateCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/answering-rule/${ruleId}`, companyAnsweringRuleUpdate);",
    "deleteCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/answering-rule/${ruleId}`);",
    "readAccountBusinessAddress": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/business-address`);",
    "updateAccountBusinessAddress": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/business-address`, modifyAccountBusinessAddressRequest);",
    "readCompanyBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/business-hours`);",
    "updateCompanyBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/business-hours`, companyBusinessHoursUpdateRequest);",
    "readCompanyCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-log`, readCompanyCallLogParameters);",
    "readCompanyCallRecord": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-log/${callRecordId}`);",
    "createCallMonitoringGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-monitoring-groups`, createCallMonitoringGroupRequest);",
    "listCallMonitoringGroups": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-monitoring-groups`, listCallMonitoringGroupsParameters);",
    "updateCallMonitoringGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}`, createCallMonitoringGroupRequest);",
    "deleteCallMonitoringGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}`);",
    "updateCallMonitoringGroupList": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}/bulk-assign`, callMonitoringBulkAssign);",
    "listCallMonitoringGroupMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}/members`, listCallMonitoringGroupMembersParameters);",
    "listCallQueues": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-queues`, listCallQueuesParameters);",
    "assignMultipleCallQueueMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-queues/${groupId}/bulk-assign`, callQueueBulkAssignResource);",
    "listCallQueueMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-queues/${groupId}/members`, listCallQueueMembersParameters);",
    "readCallRecordingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-recording`);",
    "updateCallRecordingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/call-recording`, callRecordingSettingsResource);",
    "updateCallRecordingExtensionList": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-recording/bulk-assign`, bulkAccountCallRecordingsResource);",
    "listCallRecordingCustomGreetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-recording/custom-greetings`, listCallRecordingCustomGreetingsParameters);",
    "deleteCallRecordingCustomGreetingList": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/call-recording/custom-greetings`);",
    "deleteCallRecordingCustomGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/call-recording/custom-greetings/${greetingId}`);",
    "listCallRecordingExtensions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-recording/extensions`);",
    "assignMultipleDepartmentMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/department/bulk-assign`, departmentBulkAssignResource);",
    "listDepartmentMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/department/${departmentId}/members`, listDepartmentMembersParameters);",
    "readDevice": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/device/${deviceId}`, readDeviceParameters);",
    "updateDevice": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/device/${deviceId}`, accountDeviceUpdate);",
    "listDirectoryEntries": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/directory/entries`, listDirectoryEntriesParameters);",
    "searchDirectoryEntries": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/directory/entries/search`, searchDirectoryEntriesRequest);",
    "readDirectoryEntry": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/directory/entries/${entryId}`);",
    "readAccountFederation": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/directory/federation`);",
    "listExtensions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension`, listExtensionsParameters);",
    "createExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension`, extensionCreationRequest);",
    "readExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}`);",
    "updateExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}`, extensionUpdateRequest);",
    "deleteExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}`);",
    "listExtensionActiveCalls": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/active-calls`, listExtensionActiveCallsParameters);",
    "syncAddressBook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book-sync`, syncAddressBookParameters);",
    "listContacts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact`, listContactsParameters);",
    "createContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact`, personalContactRequest, createContactParameters);",
    "readContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact/${contactId}`);",
    "updateContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact/${contactId}`, personalContactRequest, updateContactParameters);",
    "deleteContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact/${contactId}`);",
    "listAnsweringRules": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule`, listAnsweringRulesParameters);",
    "createAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule`, createAnsweringRuleRequest);",
    "readAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule/${ruleId}`, readAnsweringRuleParameters);",
    "updateAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule/${ruleId}`, updateAnsweringRuleRequest);",
    "deleteAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule/${ruleId}`);",
    "readAuthorizationProfile": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/authz-profile`);",
    "checkUserPermission": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/authz-profile/check`, checkUserPermissionParameters);",
    "readUserBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/business-hours`);",
    "updateUserBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/business-hours`, userBusinessHoursUpdateRequest);",
    "readUserCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log`, readUserCallLogParameters);",
    "deleteUserCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log`, deleteUserCallLogParameters);",
    "syncUserCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log-sync`, syncUserCallLogParameters);",
    "readUserCallRecord": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log/${callRecordId}`, readUserCallRecordParameters);",
    "readCallerBlockingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking`);",
    "updateCallerBlockingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking`, callerBlockingSettingsUpdate);",
    "listBlockedAllowedNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers`, listBlockedAllowedNumbersParameters);",
    "createBlockedAllowedNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers`, addBlockedAllowedPhoneNumber);",
    "readBlockedAllowedNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/${blockedNumberId}`);",
    "deleteBlockedAllowedNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/${blockedNumberId}`);",
    "updateBlockedAllowedNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/${blockedNumberId}`, addBlockedAllowedPhoneNumber);",
    "readExtensionCallerId": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-id`);",
    "updateExtensionCallerId": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-id`, extensionCallerIdInfo);",
    "createInternalTextMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/company-pager`, createInternalTextMessageRequest);",
    "readConferencingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/conferencing`, readConferencingSettingsParameters);",
    "updateConferencingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/conferencing`, updateConferencingInfoRequest);",
    "listExtensionDevices": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/device`, listExtensionDevicesParameters);",
    "listFavoriteContacts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/favorite`);",
    "updateFavoriteContactList": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/favorite`, favoriteCollection);",
    "createFaxMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('attachment', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/fax`, formData);",
    "listForwardingNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number`, listForwardingNumbersParameters);",
    "createForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number`, createForwardingNumberRequest);",
    "readForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number/${forwardingNumberId}`);",
    "updateForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number/${forwardingNumberId}`, updateForwardingNumberRequest);",
    "deleteForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number/${forwardingNumberId}`);",
    "listExtensionGrants": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/grant`, listExtensionGrantsParameters);",
    "createCustomUserGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('binary', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/greeting`, formData);",
    "readCustomGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/greeting/${greetingId}`);",
    "listMeetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting`);",
    "createMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting`, meetingRequestResource);",
    "readMeetingServiceInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/service-info`);",
    "readMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}`);",
    "updateMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}`, meetingRequestResource);",
    "deleteMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}`);",
    "endMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}/end`);",
    "readAssistants": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meetings-configuration/assistants`);",
    "readAssistedUsers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meetings-configuration/assisted`);",
    "listMessages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store`, listMessagesParameters);",
    "deleteMessageByFilter": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store`, deleteMessageByFilterParameters);",
    "readMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}`);",
    "updateMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}`, updateMessageRequest);",
    "deleteMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}`, deleteMessageParameters);",
    "readMessageContent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}/content/${attachmentId}`, readMessageContentParameters);",
    "syncMessages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-sync`, syncMessagesParameters);",
    "readNotificationSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/notification-settings`);",
    "updateNotificationSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/notification-settings`, notificationSettingsUpdateRequest);",
    "listExtensionPhoneNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/phone-number`, listExtensionPhoneNumbersParameters);",
    "readUserPresenceStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/presence`, readUserPresenceStatusParameters);",
    "updateUserPresenceStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/presence`, presenceInfoResource);",
    "readUserProfileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image`);",
    "createUserProfileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('image', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image`, formData);",
    "updateUserProfileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('image', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image`, formData);",
    "readScaledPofileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image/${scaleSize}`);",
    "createRingOutCall": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ring-out`, makeRingOutRequest);",
    "readRingOutCallStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ring-out/${ringoutId}`);",
    "deleteRingOutCall": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ring-out/${ringoutId}`);",
    "createRingOutCallDeprecated": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ringout`, makeRingOutRequest);",
    "readRingOutCallStatusDeprecated": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ringout/${ringoutId}`);",
    "deleteRingOutCallDeprecated": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ringout/${ringoutId}`);",
    "createSMSMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/sms`, createSMSMessage);",
    "createCompanyGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('binary', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/greeting`, formData);",
    "createIVRMenu": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/ivr-menus`, iVRMenuInfo);",
    "readIVRMenu": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-menus/${ivrMenuId}`);",
    "updateIVRMenu": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/ivr-menus/${ivrMenuId}`, iVRMenuInfo);",
    "createIVRPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('attachment', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/ivr-prompts`, formData);",
    "listIVRPrompts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-prompts`);",
    "readIVRPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}`);",
    "deleteIVRPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}`);",
    "updateIVRPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}`);",
    "readIVRPromptContent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}/content`);",
    "readMessageStoreConfiguration": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-configuration`);",
    "updateMessageStoreConfiguration": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/message-store-configuration`, messageStoreConfiguration);",
    "createMessageStoreReport": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/message-store-report`, createMessageStoreReportRequest);",
    "readMessageStoreReportTask": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-report/${taskId}`);",
    "readMessageStoreReportArchive": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-report/${taskId}/archive`);",
    "readMessageStoreReportArchiveContent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-report/${taskId}/archive/${archiveId}`);",
    "assignMultiplePagingGroupUsersDevices": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/paging-only-groups/${pagingOnlyGroupId}/bulk-assign`, editPagingGroupRequest);",
    "listPagingGroupDevices": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/paging-only-groups/${pagingOnlyGroupId}/devices`, listPagingGroupDevicesParameters);",
    "listPagingGroupUsers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/paging-only-groups/${pagingOnlyGroupId}/users`, listPagingGroupUsersParameters);",
    "listAccountPhoneNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/phone-number`, listAccountPhoneNumbersParameters);",
    "readAccountPhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/phone-number/${phoneNumberId}`);",
    "readAccountPresence": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/presence`, readAccountPresenceParameters);",
    "readCallRecording": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/recording/${recordingId}`);",
    "listCallRecordingData": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/recording/${recordingId}/content`);",
    "readAcountServiceInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/service-info`);",
    "createCallOutCallSession": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/call-out`, makeCallOutRequest);",
    "readCallSessionStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}`, readCallSessionStatusParameters);",
    "deleteCallSession": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}`);",
    "readCallPartyStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}`);",
    "updateCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}`, partyUpdateRequest);",
    "callFlipParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/flip`, callPartyFlip);",
    "forwardCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/forward`, forwardTarget);",
    "holdCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/hold`);",
    "startCallRecording": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/recordings`);",
    "pauseResumeCallRecording": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/recordings/${recordingId}`, callRecordingUpdate, pauseResumeCallRecordingParameters);",
    "rejectParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/reject`);",
    "transferCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/transfer`, transferTarget);",
    "unholdCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/unhold`);",
    "superviseCallSession": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/supervise`, superviseCallSessionRequest);",
    "listUserTemplates": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/templates`, listUserTemplatesParameters);",
    "readUserTemplate": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/templates/${templateId}`);",
    "createSIPRegistration": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/client-info/sip-provision', createSipRegistrationRequest);",
    "listCountries": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/country', listCountriesParameters);",
    "readCountry": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/country/${countryId}`);",
    "listFaxCoverPages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/fax-cover-page', listFaxCoverPagesParameters);",
    "listStandardGreetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/greeting', listStandardGreetingsParameters);",
    "readStandardGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/greeting/${greetingId}`);",
    "listLanguages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/language');",
    "readLanguage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/language/${languageId}`);",
    "listLocations": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/location', listLocationsParameters);",
    "listStates": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/state', listStatesParameters);",
    "readState": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/state/${stateId}`);",
    "listTimezones": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/timezone', listTimezonesParameters);",
    "readTimezone": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/timezone/${timezoneId}`, readTimezoneParameters);",
    "createGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/cards', glipMessageAttachmentInfoRequest, createGlipCardParameters);",
    "readGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/cards/${cardId}`);",
    "updateGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/cards/${cardId}`, glipMessageAttachmentInfoRequest);",
    "deleteGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/cards/${cardId}`);",
    "listGlipChats": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/chats', listGlipChatsParameters);",
    "readGlipChat": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/chats/${chatId}`);",
    "favoriteGlipChat": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/favorite`);",
    "readGlipPosts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/chats/${chatId}/posts`, readGlipPostsParameters);",
    "createGlipPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/posts`, glipPostPostBody);",
    "readGlipPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/chats/${chatId}/posts/${postId}`);",
    "patchGlipPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/glip/chats/${chatId}/posts/${postId}`, glipPatchPostBody);",
    "deleteGlipPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/chats/${chatId}/posts/${postId}`);",
    "markChatRead": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/read`);",
    "unfavoriteGlipChat": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/unfavorite`);",
    "markChatUnread": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/unread`);",
    "readGlipCompany": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/companies/${companyId}`);",
    "listGlipConversations": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/conversations', listGlipConversationsParameters);",
    "createGlipConversation": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/conversations', createGlipConversationRequest);",
    "readGlipConversation": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/conversations/${chatId}`);",
    "createDataExportTask": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/data-export', createDataExportTaskRequest);",
    "readDataExportTask": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/data-export/${taskId}`);",
    "readComplianceArchive": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/data-export/${taskId}/archive/${archiveId}`);",
    "readGlipEvents": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/events', readGlipEventsParameters);",
    "createEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/events', glipEventCreate);",
    "readEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/events/${eventId}`);",
    "updateEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/events/${eventId}`, glipEventCreate);",
    "deleteEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/events/${eventId}`);",
    "readGlipEveryone": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/everyone');",
    "patchGlipEveryone": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch('/restapi/v1.0/glip/everyone', updateGlipEveryoneRequest);",
    "listFavoriteChats": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/favorites', listFavoriteChatsParameters);",
    "listGlipGroups": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/groups', listGlipGroupsParameters);",
    "createGlipGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/groups', glipCreateGroup);",
    "readGlipGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}`);",
    "assignGlipGroupMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/bulk-assign`, editGroupRequest);",
    "createEventbyGroupId": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/events`, glipEventCreate);",
    "listGroupEvents": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/events`);",
    "listGlipGroupPosts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/posts`, listGlipGroupPostsParameters);",
    "createGlipGroupPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/posts`, glipCreatePost);",
    "updateGlipPostText": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/groups/${groupId}/posts/${postId}/text`, text, {}, { headers: { 'Content-Type': 'text/plain' } });",
    "createGlipGroupWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/webhooks`);",
    "listGlipGroupWebhooks": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/webhooks`);",
    "readGlipPerson": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/persons/${personId}`);",
    "listGlipPosts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/posts', listGlipPostsParameters);",
    "createPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/posts', glipCreatePost);",
    "readGlipPreferences": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/preferences');",
    "listRecentChats": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/recent/chats', listRecentChatsParameters);",
    "listGlipTeams": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/teams', listGlipTeamsParameters);",
    "createGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/teams', glipPostTeamBody);",
    "readGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/teams/${chatId}`);",
    "patchGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/glip/teams/${chatId}`, glipPatchTeamBody);",
    "deleteGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/teams/${chatId}`);",
    "addGlipTeamMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/add`, glipPostMembersListBody);",
    "archiveGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/archive`);",
    "joinGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/join`);",
    "leaveGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/leave`);",
    "removeGlipTeamMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/remove`, glipPostMembersIdsListBody);",
    "unarchiveGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/unarchive`);",
    "listGlipWebhooks": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/webhooks');",
    "readGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/webhooks/${webhookId}`);",
    "deleteGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/webhooks/${webhookId}`);",
    "activateGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/webhooks/${webhookId}/activate`);",
    "suspendGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/webhooks/${webhookId}/suspend`);",
    "parsePhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/number-parser/parse', parsePhoneNumberRequest, parsePhoneNumberParameters);",
    "verifyNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/number-porting/verify-number', numberPortingVerifyNumberRequest);",
    "readAPIStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/status');",
    "listSubscriptions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/subscription');",
    "createSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/subscription', createSubscriptionRequest);",
    "readSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/subscription/${subscriptionId}`);",
    "updateSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/subscription/${subscriptionId}`, modifySubscriptionRequest, updateSubscriptionParameters);",
    "deleteSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/subscription/${subscriptionId}`);",
    "renewSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/subscription/${subscriptionId}/renew`);",
    "readAPIVersion": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/${apiVersion}`);",
    "readServiceProviderConfig2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/v2/ServiceProviderConfig');",
    "searchViaGet2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/v2/Users', searchViaGet2Parameters);",
    "createUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/scim/v2/Users', user);",
    "searchViaPost2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/scim/v2/Users/.search', searchRequest);",
    "readUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/scim/v2/Users/${id}`);",
    "replaceUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/scim/v2/Users/${id}`, user);",
    "deleteUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/scim/v2/Users/${id}`);",
    "patchUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/scim/v2/Users/${id}`, userPatch);",
    "checkHealth2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/v2/health');"
  },
  "csharp": {
    "readAPIVersions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi().List();\n}",
    "revokeToken": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi().Oauth().Revoke().Post(revokeTokenRequest);\n}",
    "getToken": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi().Oauth().Token().Post(getTokenRequest);\n}",
    "readAPIVersion": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Get();\n}",
    "readAccountInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Get();\n}",
    "listCompanyActiveCalls": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).ActiveCalls().Get(listCompanyActiveCallsParameters);\n}",
    "createCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule().Post(companyAnsweringRuleRequest);\n}",
    "listCompanyAnsweringRules": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule().List();\n}",
    "readCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule(ruleId).Get();\n}",
    "updateCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule(ruleId).Put(companyAnsweringRuleUpdate);\n}",
    "deleteCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule(ruleId).Delete();\n}",
    "readAccountBusinessAddress": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessAddress().Get();\n}",
    "updateAccountBusinessAddress": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessAddress().Put(modifyAccountBusinessAddressRequest);\n}",
    "readCompanyBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessHours().Get();\n}",
    "updateCompanyBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessHours().Put(companyBusinessHoursUpdateRequest);\n}",
    "readCompanyCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallLog().List(readCompanyCallLogParameters);\n}",
    "readCompanyCallRecord": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallLog(callRecordId).Get();\n}",
    "createCallMonitoringGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups().Post(createCallMonitoringGroupRequest);\n}",
    "listCallMonitoringGroups": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups().Get(listCallMonitoringGroupsParameters);\n}",
    "updateCallMonitoringGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).Put(createCallMonitoringGroupRequest);\n}",
    "deleteCallMonitoringGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).Delete();\n}",
    "updateCallMonitoringGroupList": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).BulkAssign().Post(callMonitoringBulkAssign);\n}",
    "listCallMonitoringGroupMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).Members().Get(listCallMonitoringGroupMembersParameters);\n}",
    "listCallQueues": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallQueues().Get(listCallQueuesParameters);\n}",
    "assignMultipleCallQueueMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallQueues(groupId).BulkAssign().Post(callQueueBulkAssignResource);\n}",
    "listCallQueueMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallQueues(groupId).Members().Get(listCallQueueMembersParameters);\n}",
    "readCallRecordingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().Get();\n}",
    "updateCallRecordingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().Put(callRecordingSettingsResource);\n}",
    "updateCallRecordingExtensionList": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().BulkAssign().Post(bulkAccountCallRecordingsResource);\n}",
    "listCallRecordingCustomGreetings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().CustomGreetings().Get(listCallRecordingCustomGreetingsParameters);\n}",
    "deleteCallRecordingCustomGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().CustomGreetings(greetingId).Delete();\n}",
    "listCallRecordingExtensions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().Extensions().Get();\n}",
    "assignMultipleDepartmentMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Department().BulkAssign().Post(departmentBulkAssignResource);\n}",
    "listDepartmentMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Department(departmentId).Members().Get(listDepartmentMembersParameters);\n}",
    "readDevice": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Device(deviceId).Get(readDeviceParameters);\n}",
    "updateDevice": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Device(deviceId).Put(accountDeviceUpdate);\n}",
    "listDirectoryEntries": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Entries().List(listDirectoryEntriesParameters);\n}",
    "searchDirectoryEntries": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Entries().Search().Post(searchDirectoryEntriesRequest);\n}",
    "readDirectoryEntry": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Entries(entryId).Get();\n}",
    "readAccountFederation": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Federation().Get();\n}",
    "listExtensions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension().List(listExtensionsParameters);\n}",
    "createExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension().Post(extensionCreationRequest);\n}",
    "readExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Get();\n}",
    "updateExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Put(extensionUpdateRequest);\n}",
    "deleteExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Delete();\n}",
    "listExtensionActiveCalls": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ActiveCalls().Get(listExtensionActiveCallsParameters);\n}",
    "syncAddressBook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBookSync().Get(syncAddressBookParameters);\n}",
    "listContacts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact().List(listContactsParameters);\n}",
    "createContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact().Post(personalContactRequest, createContactParameters);\n}",
    "readContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact(contactId).Get();\n}",
    "updateContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact(contactId).Put(personalContactRequest, updateContactParameters);\n}",
    "deleteContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact(contactId).Delete();\n}",
    "listAnsweringRules": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule().List(listAnsweringRulesParameters);\n}",
    "createAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule().Post(createAnsweringRuleRequest);\n}",
    "readAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule(ruleId).Get(readAnsweringRuleParameters);\n}",
    "updateAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule(ruleId).Put(updateAnsweringRuleRequest);\n}",
    "deleteAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule(ruleId).Delete();\n}",
    "readAuthorizationProfile": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AuthzProfile().Get();\n}",
    "checkUserPermission": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AuthzProfile().Check().Get(checkUserPermissionParameters);\n}",
    "readUserBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).BusinessHours().Get();\n}",
    "updateUserBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).BusinessHours().Put(userBusinessHoursUpdateRequest);\n}",
    "readUserCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLog().List(readUserCallLogParameters);\n}",
    "deleteUserCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLog().Delete(deleteUserCallLogParameters);\n}",
    "syncUserCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLogSync().Get(syncUserCallLogParameters);\n}",
    "readUserCallRecord": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLog(callRecordId).Get(readUserCallRecordParameters);\n}",
    "readCallerBlockingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().Get();\n}",
    "updateCallerBlockingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().Put(callerBlockingSettingsUpdate);\n}",
    "listBlockedAllowedNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers().List(listBlockedAllowedNumbersParameters);\n}",
    "createBlockedAllowedNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers().Post(addBlockedAllowedPhoneNumber);\n}",
    "readBlockedAllowedNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers(blockedNumberId).Get();\n}",
    "deleteBlockedAllowedNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers(blockedNumberId).Delete();\n}",
    "updateBlockedAllowedNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers(blockedNumberId).Put(addBlockedAllowedPhoneNumber);\n}",
    "readExtensionCallerId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerId().Get();\n}",
    "updateExtensionCallerId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerId().Put(extensionCallerIdInfo);\n}",
    "createInternalTextMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CompanyPager().Post(createInternalTextMessageRequest);\n}",
    "readConferencingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Conferencing().Get(readConferencingSettingsParameters);\n}",
    "updateConferencingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Conferencing().Put(updateConferencingInfoRequest);\n}",
    "listExtensionDevices": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Device().Get(listExtensionDevicesParameters);\n}",
    "listFavoriteContacts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Favorite().Get();\n}",
    "updateFavoriteContactList": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Favorite().Put(favoriteCollection);\n}",
    "createFaxMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Fax().Post(createFaxMessageRequest);\n}",
    "listForwardingNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber().List(listForwardingNumbersParameters);\n}",
    "createForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber().Post(createForwardingNumberRequest);\n}",
    "readForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber(forwardingNumberId).Get();\n}",
    "updateForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber(forwardingNumberId).Put(updateForwardingNumberRequest);\n}",
    "deleteForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber(forwardingNumberId).Delete();\n}",
    "listExtensionGrants": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Grant().Get(listExtensionGrantsParameters);\n}",
    "createCustomUserGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Greeting().Post(createCustomUserGreetingRequest);\n}",
    "readCustomGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Greeting(greetingId).Get();\n}",
    "listMeetings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting().List();\n}",
    "createMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting().Post(meetingRequestResource);\n}",
    "readMeetingServiceInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting().ServiceInfo().Get();\n}",
    "readMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).Get();\n}",
    "updateMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).Put(meetingRequestResource);\n}",
    "deleteMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).Delete();\n}",
    "endMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).End().Post();\n}",
    "readAssistants": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MeetingsConfiguration().Assistants().Get();\n}",
    "readAssistedUsers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MeetingsConfiguration().Assisted().Get();\n}",
    "listMessages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore().List(listMessagesParameters);\n}",
    "readMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Get();\n}",
    "updateMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Put(updateMessageRequest);\n}",
    "deleteMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Delete(deleteMessageParameters);\n}",
    "readMessageContent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Content(attachmentId).Get(readMessageContentParameters);\n}",
    "syncMessages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageSync().Get(syncMessagesParameters);\n}",
    "readNotificationSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).NotificationSettings().Get();\n}",
    "updateNotificationSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).NotificationSettings().Put(notificationSettingsUpdateRequest);\n}",
    "listExtensionPhoneNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).PhoneNumber().Get(listExtensionPhoneNumbersParameters);\n}",
    "readUserPresenceStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Presence().Get(readUserPresenceStatusParameters);\n}",
    "updateUserPresenceStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Presence().Put(presenceInfoResource);\n}",
    "readUserProfileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage().List();\n}",
    "createUserProfileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage().Post(createUserProfileImageRequest);\n}",
    "updateUserProfileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage().Put(updateUserProfileImageRequest);\n}",
    "readScaledPofileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage(scaleSize).Get();\n}",
    "createRingOutCall": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).RingOut().Post(makeRingOutRequest);\n}",
    "readRingOutCallStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).RingOut(ringoutId).Get();\n}",
    "deleteRingOutCall": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).RingOut(ringoutId).Delete();\n}",
    "createSMSMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Sms().Post(createSmsMessage);\n}",
    "createCompanyGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Greeting().Post(createCompanyGreetingRequest);\n}",
    "createIVRMenu": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrMenus().Post(ivrMenuInfo);\n}",
    "readIVRMenu": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrMenus(ivrMenuId).Get();\n}",
    "updateIVRMenu": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrMenus(ivrMenuId).Put(ivrMenuInfo);\n}",
    "createIVRPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts().Post(createIvrPromptRequest);\n}",
    "listIVRPrompts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts().List();\n}",
    "readIVRPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Get();\n}",
    "deleteIVRPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Delete();\n}",
    "updateIVRPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Put();\n}",
    "readIVRPromptContent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Content().Get();\n}",
    "readMessageStoreConfiguration": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreConfiguration().Get();\n}",
    "updateMessageStoreConfiguration": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreConfiguration().Put(messageStoreConfiguration);\n}",
    "createMessageStoreReport": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport().Post(createMessageStoreReportRequest);\n}",
    "readMessageStoreReportTask": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport(taskId).Get();\n}",
    "readMessageStoreReportArchive": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport(taskId).Archive().List();\n}",
    "readMessageStoreReportArchiveContent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport(taskId).Archive(archiveId).Get();\n}",
    "assignMultiplePagingGroupUsersDevices": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PagingOnlyGroups(pagingOnlyGroupId).BulkAssign().Post(editPagingGroupRequest);\n}",
    "listPagingGroupDevices": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PagingOnlyGroups(pagingOnlyGroupId).Devices().Get(listPagingGroupDevicesParameters);\n}",
    "listPagingGroupUsers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PagingOnlyGroups(pagingOnlyGroupId).Users().Get(listPagingGroupUsersParameters);\n}",
    "listAccountPhoneNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PhoneNumber().List(listAccountPhoneNumbersParameters);\n}",
    "readAccountPhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PhoneNumber(phoneNumberId).Get();\n}",
    "readAccountPresence": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Presence().Get(readAccountPresenceParameters);\n}",
    "readCallRecording": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Recording(recordingId).Get();\n}",
    "listCallRecordingData": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Recording(recordingId).Content().Get();\n}",
    "readAcountServiceInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).ServiceInfo().Get();\n}",
    "createCallOutCallSession": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().CallOut().Post(makeCallOutRequest);\n}",
    "readCallSessionStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Get(readCallSessionStatusParameters);\n}",
    "deleteCallSession": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Delete();\n}",
    "readCallPartyStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Get();\n}",
    "updateCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Patch(partyUpdateRequest);\n}",
    "callFlipParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Flip().Post(callPartyFlip);\n}",
    "forwardCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Forward().Post(forwardTarget);\n}",
    "holdCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Hold().Post();\n}",
    "startCallRecording": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Recordings().Post();\n}",
    "pauseResumeCallRecording": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Recordings(recordingId).Patch(callRecordingUpdate, pauseResumeCallRecordingParameters);\n}",
    "rejectParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Reject().Post();\n}",
    "transferCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Transfer().Post(transferTarget);\n}",
    "unholdCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Unhold().Post();\n}",
    "superviseCallSession": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Supervise().Post(superviseCallSessionRequest);\n}",
    "listUserTemplates": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Templates().List(listUserTemplatesParameters);\n}",
    "readUserTemplate": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Templates(templateId).Get();\n}",
    "createSIPRegistration": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).ClientInfo().SipProvision().Post(createSipRegistrationRequest);\n}",
    "listCountries": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Country().List(listCountriesParameters);\n}",
    "readCountry": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Country(countryId).Get();\n}",
    "listFaxCoverPages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().FaxCoverPage().Get(listFaxCoverPagesParameters);\n}",
    "listStandardGreetings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Greeting().List(listStandardGreetingsParameters);\n}",
    "readStandardGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Greeting(greetingId).Get();\n}",
    "listLanguages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Language().List();\n}",
    "readLanguage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Language(languageId).Get();\n}",
    "listLocations": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Location().Get(listLocationsParameters);\n}",
    "listStates": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().State().List(listStatesParameters);\n}",
    "readState": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().State(stateId).Get();\n}",
    "listTimezones": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Timezone().List(listTimezonesParameters);\n}",
    "readTimezone": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Timezone(timezoneId).Get(readTimezoneParameters);\n}",
    "createGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards().Post(glipMessageAttachmentInfoRequest, createGlipCardParameters);\n}",
    "readGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards(cardId).Get();\n}",
    "updateGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards(cardId).Put(glipMessageAttachmentInfoRequest);\n}",
    "deleteGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards(cardId).Delete();\n}",
    "listGlipChats": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats().List(listGlipChatsParameters);\n}",
    "readGlipChat": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Get();\n}",
    "favoriteGlipChat": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Favorite().Post();\n}",
    "readGlipPosts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts().List(readGlipPostsParameters);\n}",
    "createGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts().Post(glipPostPostBody);\n}",
    "readGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts(postId).Get();\n}",
    "patchGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts(postId).Patch(glipPatchPostBody);\n}",
    "deleteGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts(postId).Delete();\n}",
    "markChatRead": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Read().Post();\n}",
    "unfavoriteGlipChat": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Unfavorite().Post();\n}",
    "markChatUnread": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Unread().Post();\n}",
    "readGlipCompany": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Companies(companyId).Get();\n}",
    "listGlipConversations": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Conversations().List(listGlipConversationsParameters);\n}",
    "createGlipConversation": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Conversations().Post(createGlipConversationRequest);\n}",
    "readGlipConversation": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Conversations(chatId).Get();\n}",
    "createDataExportTask": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().DataExport().Post(createDataExportTaskRequest);\n}",
    "readDataExportTask": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().DataExport(taskId).Get();\n}",
    "readComplianceArchive": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().DataExport(taskId).Archive(archiveId).Get();\n}",
    "readGlipEvents": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events().List(readGlipEventsParameters);\n}",
    "createEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events().Post(glipEventCreate);\n}",
    "readEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events(eventId).Get();\n}",
    "updateEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events(eventId).Put(glipEventCreate);\n}",
    "deleteEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events(eventId).Delete();\n}",
    "readGlipEveryone": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Everyone().Get();\n}",
    "patchGlipEveryone": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Everyone().Patch(updateGlipEveryoneRequest);\n}",
    "listFavoriteChats": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Favorites().Get(listFavoriteChatsParameters);\n}",
    "listGlipGroups": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups().List(listGlipGroupsParameters);\n}",
    "createGlipGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups().Post(glipCreateGroup);\n}",
    "readGlipGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Get();\n}",
    "assignGlipGroupMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).BulkAssign().Post(editGroupRequest);\n}",
    "createEventbyGroupId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Events().Post(glipEventCreate);\n}",
    "listGroupEvents": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Events().Get();\n}",
    "listGlipGroupPosts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Posts().Get(listGlipGroupPostsParameters);\n}",
    "createGlipGroupPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Posts().Post(glipCreatePost);\n}",
    "updateGlipPostText": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Posts(postId).Text().Put(string);\n}",
    "createGlipGroupWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Webhooks().Post();\n}",
    "listGlipGroupWebhooks": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Webhooks().Get();\n}",
    "readGlipPerson": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Persons(personId).Get();\n}",
    "listGlipPosts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Posts().Get(listGlipPostsParameters);\n}",
    "createPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Posts().Post(glipCreatePost);\n}",
    "readGlipPreferences": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Preferences().Get();\n}",
    "listRecentChats": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Recent().Chats().Get(listRecentChatsParameters);\n}",
    "listGlipTeams": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams().List(listGlipTeamsParameters);\n}",
    "createGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams().Post(glipPostTeamBody);\n}",
    "readGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Get();\n}",
    "patchGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Patch(glipPatchTeamBody);\n}",
    "deleteGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Delete();\n}",
    "addGlipTeamMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Add().Post(glipPostMembersListBody);\n}",
    "archiveGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Archive().Post();\n}",
    "joinGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Join().Post();\n}",
    "leaveGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Leave().Post();\n}",
    "removeGlipTeamMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Remove().Post(glipPostMembersIdsListBody);\n}",
    "unarchiveGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Unarchive().Post();\n}",
    "listGlipWebhooks": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks().List();\n}",
    "readGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Get();\n}",
    "deleteGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Delete();\n}",
    "activateGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Activate().Post();\n}",
    "suspendGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Suspend().Post();\n}",
    "parsePhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).NumberParser().Parse().Post(parsePhoneNumberRequest, parsePhoneNumberParameters);\n}",
    "verifyNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).NumberPorting().VerifyNumber().Post(numberPortingVerifyNumberRequest);\n}",
    "readAPIStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Status().Get();\n}",
    "listSubscriptions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription().List();\n}",
    "createSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription().Post(createSubscriptionRequest);\n}",
    "readSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Get();\n}",
    "updateSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Put(modifySubscriptionRequest, updateSubscriptionParameters);\n}",
    "deleteSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Delete();\n}",
    "renewSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Renew().Post();\n}",
    "readServiceProviderConfig2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).ServiceProviderConfig().Get();\n}",
    "searchViaGet2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users().List(searchViaGet2Parameters);\n}",
    "createUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users().Post(user);\n}",
    "searchViaPost2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users().DotSearch().Post(searchRequest);\n}",
    "readUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Get();\n}",
    "replaceUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Put(user);\n}",
    "deleteUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Delete();\n}",
    "patchUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Patch(userPatch);\n}",
    "checkHealth2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Health().Get();\n}"
  }
}