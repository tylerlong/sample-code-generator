{
  "javascript": {
    "getAllVersions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi');",
    "loadAccount": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}`);",
    "listCompanyActiveCalls": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/active-calls`, listCompanyActiveCallsParameters);",
    "createCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/answering-rule`, companyAnsweringRuleRequest);",
    "listCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/answering-rule`);",
    "loadCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/answering-rule/${ruleId}`);",
    "updateCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/answering-rule/${ruleId}`, companyAnsweringRuleUpdate);",
    "deleteCompanyAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/answering-rule/${ruleId}`);",
    "loadAccountBusinessAddress": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/business-address`);",
    "updateAccountBusinessAddress": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/business-address`, modifyAccountBusinessAddressRequest);",
    "loadCompanyBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/business-hours`);",
    "updateCompanyBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/business-hours`, companyBusinessHoursUpdateRequest);",
    "loadCompanyCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-log`, loadCompanyCallLogParameters);",
    "loadCompanyCallLogRecord": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-log/${callRecordId}`);",
    "createCallMonitoringGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-monitoring-groups`, createCallMonitoringGroupRequest);",
    "listCallMonitoringGroups": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-monitoring-groups`, listCallMonitoringGroupsParameters);",
    "updateCallMonitoringGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}`, createCallMonitoringGroupRequest);",
    "removeCallMonitoringGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}`);",
    "updateCallMonitoringGroups": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}/bulk-assign`, callMonitoringBulkAssign);",
    "listCallMonitoringGroupMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-monitoring-groups/${groupId}/members`, listCallMonitoringGroupMembersParameters);",
    "listCallQueues": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-queues`, listCallQueuesParameters);",
    "assignCallQueueMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-queues/${groupId}/bulk-assign`, callQueueBulkAssignResource);",
    "listCallQueueMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-queues/${groupId}/members`, listCallQueueMembersParameters);",
    "loadCallRecordingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-recording`);",
    "updateCallRecordingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/call-recording`, callRecordingSettingsResource);",
    "updateCallRecordingExtensionSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/call-recording/bulk-assign`, bulkAccountCallRecordingsResource);",
    "listCallRecordingCustomGreetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-recording/custom-greetings`, listCallRecordingCustomGreetingsParameters);",
    "deleteCallRecordingCustomGreetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/call-recording/custom-greetings`);",
    "deleteCallRecordingCustomGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/call-recording/custom-greetings/${greetingId}`);",
    "listCallRecordingExtensionSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/call-recording/extensions`);",
    "bulkAssignDepartments": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/department/bulk-assign`, departmentBulkAssignResource);",
    "listDepartmentMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/department/${departmentId}/members`, listDepartmentMembersParameters);",
    "loadAccountDevice": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/device/${deviceId}`);",
    "updateDevice": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/device/${deviceId}`, accountDeviceUpdate);",
    "listDirectoryEntries": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/directory/entries`, listDirectoryEntriesParameters);",
    "searchDirectoryEntries": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/directory/entries/search`, searchDirectoryEntriesRequest);",
    "loadAccountFederation": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/directory/federation`);",
    "listExtensions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension`, listExtensionsParameters);",
    "createExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension`, extensionCreationRequest);",
    "loadExtensionInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}`);",
    "updateExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}`, extensionUpdateRequest);",
    "deleteExtension": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}`);",
    "listExtensionActiveCalls": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/active-calls`, listExtensionActiveCallsParameters);",
    "syncAddressBook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book-sync`, syncAddressBookParameters);",
    "listContacts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact`, listContactsParameters);",
    "createContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact`, personalContactResource, createContactParameters);",
    "loadContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact/${contactId}`);",
    "updateContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact/${contactId}`, personalContactResource, updateContactParameters);",
    "deleteContact": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/address-book/contact/${contactId}`);",
    "listAnsweringRules": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule`, listAnsweringRulesParameters);",
    "createAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule`, createAnsweringRuleRequest);",
    "loadAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule/${ruleId}`, loadAnsweringRuleParameters);",
    "updateAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule/${ruleId}`, updateAnsweringRuleRequest);",
    "deleteAnsweringRule": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/answering-rule/${ruleId}`);",
    "getAuthorizationProfile": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/authz-profile`);",
    "checkUserPermission": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/authz-profile/check`, checkUserPermissionParameters);",
    "loadUserBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/business-hours`);",
    "updateUserBusinessHours": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/business-hours`, userBusinessHoursUpdateRequest);",
    "loadUserCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log`, loadUserCallLogParameters);",
    "deleteUserCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log`, deleteUserCallLogParameters);",
    "syncUserCallLog": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log-sync`, syncUserCallLogParameters);",
    "getCallRecords": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/call-log/${callRecordId}`, getCallRecordsParameters);",
    "loadCallBlockingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking`);",
    "updateCallBlockingSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking`, callerBlockingSettingsUpdate);",
    "listBlockedAllowedPhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers`, listBlockedAllowedPhoneNumberParameters);",
    "createBlockedAllowedPhoneNumberList": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers`, addBlockedAllowedPhoneNumber);",
    "createBlockedAllowedPhoneNumberLists": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/bulk-update`);",
    "loadBlockedAllowedPhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/${blockedNumberId}`);",
    "deleteBlockedAllowedPhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/${blockedNumberId}`);",
    "updateBlockedAllowedPhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-blocking/phone-numbers/${blockedNumberId}`, addBlockedAllowedPhoneNumber);",
    "loadExtensionCallerId": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-id`);",
    "updateExtensionCallerId": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/caller-id`, extensionCallerIdInfo);",
    "createInternalTextMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/company-pager`, createInternalTextMessageRequest);",
    "loadConferencingInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/conferencing`, loadConferencingInfoParameters);",
    "updateConferencingInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/conferencing`, updateConferencingInfoRequest);",
    "listExtensionDevices": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/device`, listExtensionDevicesParameters);",
    "listFavoriteContacts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/favorite`);",
    "updateFavoriteContactList": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/favorite`, favoriteCollection);",
    "sendFaxMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('attachment', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/fax`, formData);",
    "listExtensionForwardingNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number`, listExtensionForwardingNumbersParameters);",
    "createExtensionForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number`, createForwardingNumberRequest);",
    "loadExtensionForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number/${forwardingNumberId}`);",
    "updateExtensionForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number/${forwardingNumberId}`, updateForwardingNumberRequest);",
    "deleteExtensionForwardingNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/forwarding-number/${forwardingNumberId}`);",
    "listExtensionGrants": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/grant`, listExtensionGrantsParameters);",
    "createUserCustomGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('audio', fs.readFileSync('./test.mp3'), { filename: 'text.mp3' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/greeting`, formData, customGreetingRequest);",
    "loadCustomGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/greeting/${greetingId}`);",
    "listMeetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting`);",
    "createMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting`, meetingRequestResource);",
    "listUserMeetingRecordings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting-recordings`, listUserMeetingRecordingsParameters);",
    "loadMeetingServiceInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/service-info`);",
    "loadMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}`);",
    "updateMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}`, meetingRequestResource);",
    "deleteMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}`);",
    "endMeeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/meeting/${meetingId}/end`);",
    "listMessages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store`, listMessagesParameters);",
    "deleteMessagesByFilter": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store`, deleteMessagesByFilterParameters);",
    "loadMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}`);",
    "updateMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}`, updateMessageRequest);",
    "deleteMessage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}`, deleteMessageParameters);",
    "getMessageAttachmentById": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-store/${messageId}/content/${attachmentId}`, getMessageAttachmentByIdParameters);",
    "syncMessages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/message-sync`, syncMessagesParameters);",
    "loadNotificationSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/notification-settings`);",
    "updateNotificationSettings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/notification-settings`, notificationSettingsUpdateRequest);",
    "listExtensionPhoneNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/phone-number`, listExtensionPhoneNumbersParameters);",
    "getPresenceStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/presence`, getPresenceStatusParameters);",
    "updatePresenceStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/presence`, presenceInfoResource);",
    "downloadProfileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image`);",
    "uploadProfileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('image', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image`, formData);",
    "updateProfileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('image', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image`, formData);",
    "downloadScaledPofileImage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/profile-image/${scaleSize}`);",
    "makeRingOutCall": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ring-out`, makeRingOutRequest);",
    "getRingOutCallStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ring-out/${ringoutId}`);",
    "cancelRingOutCall": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ring-out/${ringoutId}`);",
    "makeRingOutCallDeprecated": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ringout`, makeRingOutRequest);",
    "getRingOutCallStatusDeprecated": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ringout/${ringoutId}`);",
    "cancelRingOutCallDeprecated": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/ringout/${ringoutId}`);",
    "sendSMS": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/extension/${extensionId}/sms`, createSMSMessage);",
    "createCompanyGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('audio', fs.readFileSync('./test.mp3'), { filename: 'text.mp3' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/greeting`, formData, customCompanyGreetingRequest);",
    "createIvrMenu": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/ivr-menus`, iVRMenuInfo);",
    "loadIvrMenu": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-menus/${ivrMenuId}`);",
    "updateIvrMenu": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/ivr-menus/${ivrMenuId}`, iVRMenuInfo);",
    "createIvrPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', Buffer.from(JSON.stringify(body)), { filename: 'request.json' });\nformData.append('attachment', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/ivr-prompts`, formData);",
    "listIvrPrompts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-prompts`);",
    "loadIvrPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}`);",
    "deleteIvrPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}`);",
    "updateIvrPrompt": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}`);",
    "loadIvrPromptContent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/ivr-prompts/${promptId}/content`);",
    "listAccountMeetingRecordings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/meeting-recordings`, listAccountMeetingRecordingsParameters);",
    "loadMessageStoreConfiguration": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-configuration`);",
    "updateMessageStoreConfiguration": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/account/${accountId}/message-store-configuration`, messageStoreConfiguration);",
    "createMessageStoreReport": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/message-store-report`, createMessageStoreReportRequest);",
    "loadMessageStoreReportTask": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-report/${taskId}`);",
    "loadMessageStoreReportArchive": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-report/${taskId}/archive`);",
    "loadMessageStoreReportArchiveContent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/message-store-report/${taskId}/archive/${archiveId}`);",
    "bulkAssignPagingGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/paging-only-groups/${pagingOnlyGroupId}/bulk-assign`, editPagingGroupRequest);",
    "listPagingGroupDevices": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/paging-only-groups/${pagingOnlyGroupId}/devices`, listPagingGroupDevicesParameters);",
    "listPagingGroupUsers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/paging-only-groups/${pagingOnlyGroupId}/users`, listPagingGroupUsersParameters);",
    "listAccountPhoneNumbers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/phone-number`, listAccountPhoneNumbersParameters);",
    "loadAccountPhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/phone-number/${phoneNumberId}`);",
    "accountPresence": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/presence`, accountPresenceParameters);",
    "listCallRecordings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/recording/${recordingId}`);",
    "listCallRecordingData": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/recording/${recordingId}/content`);",
    "loadServiceInfo": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/service-info`);",
    "getCallSessionStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}`, getCallSessionStatusParameters);",
    "deleteCallSession": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}`);",
    "getCallPartyStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}`);",
    "updateCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}`, partyUpdateRequest);",
    "callFlipParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/flip`, callPartyFlip);",
    "forwardCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/forward`, forwardTarget);",
    "holdCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/hold`);",
    "startCallRecording": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/recordings`);",
    "pauseResumeCallRecording": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/recordings/${recordingId}`, callRecordingUpdate, pauseResumeCallRecordingParameters);",
    "rejectParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/reject`);",
    "transferCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/transfer`, transferTarget);",
    "unholdCallParty": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/account/${accountId}/telephony/sessions/${sessionId}/parties/${partyId}/unhold`);",
    "listTemplates": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/templates`, listTemplatesParameters);",
    "loadTemplate": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/account/${accountId}/templates/${templateId}`);",
    "createSipRegistration": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/client-info/sip-provision', createSipRegistrationRequest);",
    "listCountries": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/country', listCountriesParameters);",
    "loadCountry": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/country/${countryId}`);",
    "listFaxCoverPages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/fax-cover-page', listFaxCoverPagesParameters);",
    "listStandardGreetings": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/greeting', listStandardGreetingsParameters);",
    "loadStandardGreeting": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/greeting/${greetingId}`);",
    "listLanguages": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/language');",
    "loadLanguage": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/language/${languageId}`);",
    "listLocations": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/location', listLocationsParameters);",
    "listStates": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/state', listStatesParameters);",
    "loadState": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/state/${stateId}`);",
    "listTimezones": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/dictionary/timezone', listTimezonesParameters);",
    "loadTimezone": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/dictionary/timezone/${timezoneId}`, loadTimezoneParameters);",
    "createGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/cards', glipMessageAttachmentInfoRequest, createGlipCardParameters);",
    "loadGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/cards/${cardId}`);",
    "updateGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/cards/${cardId}`, glipMessageAttachmentInfoRequest);",
    "deleteGlipCard": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/cards/${cardId}`);",
    "listGlipChats": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/chats', listGlipChatsParameters);",
    "loadGlipChat": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/chats/${chatId}`);",
    "favoriteGlipChat": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/favorite`);",
    "markChatRead": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/read`);",
    "unfavoriteGlipChat": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/unfavorite`);",
    "markChatUnread": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/chats/${chatId}/unread`);",
    "loadGlipCompany": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/companies/${companyId}`);",
    "listGlipConversations": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/conversations', listGlipConversationsParameters);",
    "createGlipConversation": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/conversations', glipPostMembersListBody);",
    "loadGlipConversation": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/conversations/${chatId}`);",
    "createDataExportTask": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/data-export', createDataExportTaskRequest);",
    "loadDataExportTask": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/data-export/${taskId}`);",
    "getComplianceArchiveStream": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/data-export/${taskId}/archive/${archiveId}`);",
    "loadGlipEvents": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/events', loadGlipEventsParameters);",
    "createEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/events', glipEventCreate);",
    "loadEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/events/${eventId}`);",
    "updateEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/events/${eventId}`, glipEventCreate);",
    "deleteEvent": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/events/${eventId}`);",
    "loadGlipEveryone": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/everyone');",
    "updateGlipEveryone": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch('/restapi/v1.0/glip/everyone', updateGlipEveryoneRequest);",
    "listFavoriteChats": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/favorites', listFavoriteChatsParameters);",
    "createGlipFile": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst FormData = require('form-data');\nconst formData = new FormData();\nformData.append('body', fs.readFileSync('./test.png'), { filename: 'text.png' });\nconst r = await platform.post('/restapi/v1.0/glip/files', formData, createGlipFileParameters);",
    "listGlipGroups": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/groups', listGlipGroupsParameters);",
    "createGlipGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/groups', glipCreateGroup);",
    "loadGlipGroup": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}`);",
    "assignGlipGroupMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/bulk-assign`, editGroupRequest);",
    "createEventbyGroupId": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/events`, glipEventCreate);",
    "listGroupEvents": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/events`);",
    "loadGroupNotes": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/notes`, loadGroupNotesParameters);",
    "createGroupNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/notes`, glipNoteCreate);",
    "listGlipGroupPosts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/posts`, listGlipGroupPostsParameters);",
    "createGlipGroupPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/posts`, glipCreatePost);",
    "updateGlipPostText": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/groups/${groupId}/posts/${postId}/text`, text, {}, { headers: { 'Content-Type': 'text/plain' } });",
    "createGlipGroupWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/groups/${groupId}/webhooks`);",
    "listGlipGroupWebhooks": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/groups/${groupId}/webhooks`);",
    "loadUserNotes": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/notes', loadUserNotesParameters);",
    "createUserNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/notes', glipNoteCreate);",
    "loadUserNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/notes/${noteId}`);",
    "deleteNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/notes/${noteId}`);",
    "patchNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/glip/notes/${noteId}`, glipNoteCreate, patchNoteParameters);",
    "updateNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/glip/notes/${noteId}`, glipNoteCreate);",
    "lockNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/notes/${noteId}/lock`);",
    "publishNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/notes/${noteId}/publish`);",
    "unlockNote": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/notes/${noteId}/unlock`);",
    "loadGlipPerson": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/persons/${personId}`);",
    "listGlipPosts": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/posts', listGlipPostsParameters);",
    "createPost": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/posts', glipCreatePost);",
    "loadGlipPreferences": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/preferences');",
    "listRecentChats": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/recent/chats', listRecentChatsParameters);",
    "listGlipTeams": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/teams', listGlipTeamsParameters);",
    "createGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/glip/teams', glipPostTeamBody);",
    "loadGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/teams/${chatId}`);",
    "updateGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/restapi/v1.0/glip/teams/${chatId}`, glipPatchTeamBody);",
    "deleteGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/teams/${chatId}`);",
    "addGlipTeamMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/add`, glipPostMembersListBody);",
    "archiveGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/archive`);",
    "joinGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/join`);",
    "leaveGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/leave`);",
    "removeGlipTeamMembers": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/remove`, glipPostMembersIdsListBody);",
    "unarchiveGlipTeam": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/teams/${chatId}/unarchive`);",
    "listGlipWebhooks": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/glip/webhooks');",
    "loadGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/glip/webhooks/${webhookId}`);",
    "deleteGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/glip/webhooks/${webhookId}`);",
    "activateGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/webhooks/${webhookId}/activate`);",
    "suspendGlipWebhook": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/glip/webhooks/${webhookId}/suspend`);",
    "parsePhoneNumber": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/number-parser/parse', parsePhoneNumberRequest, parsePhoneNumberParameters);",
    "loadAPIStatus": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/status');",
    "listSubscriptions": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/restapi/v1.0/subscription');",
    "createSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/restapi/v1.0/subscription', createSubscriptionRequest);",
    "loadSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/v1.0/subscription/${subscriptionId}`);",
    "updateSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/restapi/v1.0/subscription/${subscriptionId}`, modifySubscriptionRequest, updateSubscriptionParameters);",
    "deleteSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/restapi/v1.0/subscription/${subscriptionId}`);",
    "renewSubscription": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post(`/restapi/v1.0/subscription/${subscriptionId}/renew`);",
    "getApiVersion": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/restapi/${apiVersion}`);",
    "checkHealth": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/health');",
    "getServiceProviderConfig2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/v2/ServiceProviderConfig');",
    "searchViaGet2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/v2/Users', searchViaGet2Parameters);",
    "createUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/scim/v2/Users', user);",
    "searchViaPost2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.post('/scim/v2/Users/.search', searchRequest);",
    "getUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get(`/scim/v2/Users/${id}`);",
    "replaceUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.put(`/scim/v2/Users/${id}`, user);",
    "deleteUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.delete(`/scim/v2/Users/${id}`);",
    "patchUser2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.patch(`/scim/v2/Users/${id}`, userPatch);",
    "checkHealth2": "const SDK = require('ringcentral');\nconst rcsdk = new SDK({server: 'serverURL', appKey: 'clientId', appSecret: 'clientSecret'});\nconst platform = rcsdk.platform();\nawait platform.login({ username: 'username', extension: 'extension', password: 'password' });\nconst r = await platform.get('/scim/v2/health');"
  },
  "csharp": {
    "getAllVersions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi().List();\n}",
    "revokeToken": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi().Oauth().Revoke().Post(revokeTokenRequest);\n}",
    "getToken": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi().Oauth().Token().Post(getTokenRequest);\n}",
    "getApiVersion": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Get();\n}",
    "loadAccount": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Get();\n}",
    "listCompanyActiveCalls": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).ActiveCalls().Get(listCompanyActiveCallsParameters);\n}",
    "createCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule().Post(companyAnsweringRuleRequest);\n}",
    "listCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule().List();\n}",
    "loadCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule(ruleId).Get();\n}",
    "updateCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule(ruleId).Put(companyAnsweringRuleUpdate);\n}",
    "deleteCompanyAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).AnsweringRule(ruleId).Delete();\n}",
    "loadAccountBusinessAddress": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessAddress().Get();\n}",
    "updateAccountBusinessAddress": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessAddress().Put(modifyAccountBusinessAddressRequest);\n}",
    "loadCompanyBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessHours().Get();\n}",
    "updateCompanyBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).BusinessHours().Put(companyBusinessHoursUpdateRequest);\n}",
    "loadCompanyCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallLog().List(loadCompanyCallLogParameters);\n}",
    "loadCompanyCallRecord": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallLog(callRecordId).Get();\n}",
    "createCallMonitoringGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups().Post(createCallMonitoringGroupRequest);\n}",
    "listCallMonitoringGroups": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups().Get(listCallMonitoringGroupsParameters);\n}",
    "updateCallMonitoringGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).Put(createCallMonitoringGroupRequest);\n}",
    "removeCallMonitoringGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).Delete();\n}",
    "updateCallMonitoringGroups": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).BulkAssign().Post(callMonitoringBulkAssign);\n}",
    "listCallMonitoringGroupMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallMonitoringGroups(groupId).Members().Get(listCallMonitoringGroupMembersParameters);\n}",
    "listCallQueues": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallQueues().Get(listCallQueuesParameters);\n}",
    "assignCallQueueMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallQueues(groupId).BulkAssign().Post(callQueueBulkAssignResource);\n}",
    "listCallQueueMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallQueues(groupId).Members().Get(listCallQueueMembersParameters);\n}",
    "loadCallRecordingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().Get();\n}",
    "updateCallRecordingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().Put(callRecordingSettingsResource);\n}",
    "updateCallRecordingExtensionList": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().BulkAssign().Post(bulkAccountCallRecordingsResource);\n}",
    "listCallRecordingCustomGreetings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().CustomGreetings().Get(listCallRecordingCustomGreetingsParameters);\n}",
    "deleteCallRecordingCustomGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().CustomGreetings(greetingId).Delete();\n}",
    "listCallRecordingExtensions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).CallRecording().Extensions().Get();\n}",
    "bulkAssignDepartments": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Department().BulkAssign().Post(departmentBulkAssignResource);\n}",
    "listDepartmentMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Department(departmentId).Members().Get(listDepartmentMembersParameters);\n}",
    "loadAccountDevice": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Device(deviceId).Get(loadAccountDeviceParameters);\n}",
    "updateDevice": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Device(deviceId).Put(accountDeviceUpdate);\n}",
    "listDirectoryEntries": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Entries().List(listDirectoryEntriesParameters);\n}",
    "searchDirectoryEntries": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Entries().Search().Post(searchDirectoryEntriesRequest);\n}",
    "loadDirectoryEntry": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Entries(entryId).Get();\n}",
    "loadAccountFederation": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Directory().Federation().Get();\n}",
    "listExtensions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension().List(listExtensionsParameters);\n}",
    "createExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension().Post(extensionCreationRequest);\n}",
    "loadExtensionInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Get();\n}",
    "updateExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Put(extensionUpdateRequest);\n}",
    "deleteExtension": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Delete();\n}",
    "listExtensionActiveCalls": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ActiveCalls().Get(listExtensionActiveCallsParameters);\n}",
    "syncAddressBook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBookSync().Get(syncAddressBookParameters);\n}",
    "listContacts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact().List(listContactsParameters);\n}",
    "createContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact().Post(personalContactRequest, createContactParameters);\n}",
    "loadContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact(contactId).Get();\n}",
    "updateContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact(contactId).Put(personalContactRequest, updateContactParameters);\n}",
    "deleteContact": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AddressBook().Contact(contactId).Delete();\n}",
    "listAnsweringRules": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule().List(listAnsweringRulesParameters);\n}",
    "createAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule().Post(createAnsweringRuleRequest);\n}",
    "loadAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule(ruleId).Get(loadAnsweringRuleParameters);\n}",
    "updateAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule(ruleId).Put(updateAnsweringRuleRequest);\n}",
    "deleteAnsweringRule": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AnsweringRule(ruleId).Delete();\n}",
    "getAuthorizationProfile": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AuthzProfile().Get();\n}",
    "checkUserPermission": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).AuthzProfile().Check().Get(checkUserPermissionParameters);\n}",
    "loadUserBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).BusinessHours().Get();\n}",
    "updateUserBusinessHours": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).BusinessHours().Put(userBusinessHoursUpdateRequest);\n}",
    "loadUserCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLog().List(loadUserCallLogParameters);\n}",
    "deleteUserCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLog().Delete(deleteUserCallLogParameters);\n}",
    "syncUserCallLog": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLogSync().Get(syncUserCallLogParameters);\n}",
    "getUserCallRecord": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallLog(callRecordId).Get(getUserCallRecordParameters);\n}",
    "loadCallBlockingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().Get();\n}",
    "updateCallBlockingSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().Put(callerBlockingSettingsUpdate);\n}",
    "listBlockedAllowedPhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers().List(listBlockedAllowedPhoneNumberParameters);\n}",
    "createBlockedAllowedPhoneNumberList": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers().Post(addBlockedAllowedPhoneNumber);\n}",
    "loadBlockedAllowedPhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers(blockedNumberId).Get();\n}",
    "deleteBlockedAllowedPhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers(blockedNumberId).Delete();\n}",
    "updateBlockedAllowedPhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerBlocking().PhoneNumbers(blockedNumberId).Put(addBlockedAllowedPhoneNumber);\n}",
    "loadExtensionCallerId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerId().Get();\n}",
    "updateExtensionCallerId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CallerId().Put(extensionCallerIdInfo);\n}",
    "createInternalTextMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).CompanyPager().Post(createInternalTextMessageRequest);\n}",
    "loadConferencingInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Conferencing().Get(loadConferencingInfoParameters);\n}",
    "updateConferencingInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Conferencing().Put(updateConferencingInfoRequest);\n}",
    "listExtensionDevices": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Device().Get(listExtensionDevicesParameters);\n}",
    "listFavoriteContacts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Favorite().Get();\n}",
    "updateFavoriteContactList": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Favorite().Put(favoriteCollection);\n}",
    "sendFaxMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Fax().Post(sendFaxMessageRequest);\n}",
    "listExtensionForwardingNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber().List(listExtensionForwardingNumbersParameters);\n}",
    "createExtensionForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber().Post(createForwardingNumberRequest);\n}",
    "loadExtensionForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber(forwardingNumberId).Get();\n}",
    "updateExtensionForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber(forwardingNumberId).Put(updateForwardingNumberRequest);\n}",
    "deleteExtensionForwardingNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ForwardingNumber(forwardingNumberId).Delete();\n}",
    "listExtensionGrants": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Grant().Get(listExtensionGrantsParameters);\n}",
    "createUserCustomGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Greeting().Post(createUserCustomGreetingRequest);\n}",
    "loadCustomGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Greeting(greetingId).Get();\n}",
    "listMeetings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting().List();\n}",
    "createMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting().Post(meetingRequestResource);\n}",
    "loadMeetingServiceInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting().ServiceInfo().Get();\n}",
    "loadMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).Get();\n}",
    "updateMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).Put(meetingRequestResource);\n}",
    "deleteMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).Delete();\n}",
    "endMeeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Meeting(meetingId).End().Post();\n}",
    "loadAssistants": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MeetingsConfiguration().Assistants().Get();\n}",
    "loadAssistedUsers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MeetingsConfiguration().Assisted().Get();\n}",
    "listMessages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore().List(listMessagesParameters);\n}",
    "loadMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Get();\n}",
    "updateMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Put(updateMessageRequest);\n}",
    "deleteMessage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Delete(deleteMessageParameters);\n}",
    "getMessageAttachmentById": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageStore(messageId).Content(attachmentId).Get(getMessageAttachmentByIdParameters);\n}",
    "syncMessages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).MessageSync().Get(syncMessagesParameters);\n}",
    "loadNotificationSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).NotificationSettings().Get();\n}",
    "updateNotificationSettings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).NotificationSettings().Put(notificationSettingsUpdateRequest);\n}",
    "listExtensionPhoneNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).PhoneNumber().Get(listExtensionPhoneNumbersParameters);\n}",
    "getPresenceStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Presence().Get(getPresenceStatusParameters);\n}",
    "updatePresenceStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Presence().Put(presenceInfoResource);\n}",
    "downloadProfileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage().List();\n}",
    "uploadProfileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage().Post(uploadProfileImageRequest);\n}",
    "updateProfileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage().Put(updateProfileImageRequest);\n}",
    "downloadScaledPofileImage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).ProfileImage(scaleSize).Get();\n}",
    "makeRingOutCall": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).RingOut().Post(makeRingOutRequest);\n}",
    "getRingOutCallStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).RingOut(ringoutId).Get();\n}",
    "cancelRingOutCall": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).RingOut(ringoutId).Delete();\n}",
    "sendSMS": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Extension(extensionId).Sms().Post(createSmsMessage);\n}",
    "createCompanyGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Greeting().Post(createCompanyGreetingRequest);\n}",
    "createIvrMenu": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrMenus().Post(ivrMenuInfo);\n}",
    "loadIvrMenu": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrMenus(ivrMenuId).Get();\n}",
    "updateIvrMenu": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrMenus(ivrMenuId).Put(ivrMenuInfo);\n}",
    "createIvrPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts().Post(createIvrPromptRequest);\n}",
    "listIvrPrompts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts().List();\n}",
    "loadIvrPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Get();\n}",
    "deleteIvrPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Delete();\n}",
    "updateIvrPrompt": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Put();\n}",
    "loadIvrPromptContent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).IvrPrompts(promptId).Content().Get();\n}",
    "loadMessageStoreConfiguration": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreConfiguration().Get();\n}",
    "updateMessageStoreConfiguration": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreConfiguration().Put(messageStoreConfiguration);\n}",
    "createMessageStoreReport": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport().Post(createMessageStoreReportRequest);\n}",
    "loadMessageStoreReportTask": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport(taskId).Get();\n}",
    "loadMessageStoreReportArchive": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport(taskId).Archive().List();\n}",
    "loadMessageStoreReportArchiveContent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).MessageStoreReport(taskId).Archive(archiveId).Get();\n}",
    "bulkAssignPagingGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PagingOnlyGroups(pagingOnlyGroupId).BulkAssign().Post(editPagingGroupRequest);\n}",
    "listPagingGroupDevices": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PagingOnlyGroups(pagingOnlyGroupId).Devices().Get(listPagingGroupDevicesParameters);\n}",
    "listPagingGroupUsers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PagingOnlyGroups(pagingOnlyGroupId).Users().Get(listPagingGroupUsersParameters);\n}",
    "listAccountPhoneNumbers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PhoneNumber().List(listAccountPhoneNumbersParameters);\n}",
    "loadAccountPhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).PhoneNumber(phoneNumberId).Get();\n}",
    "accountPresence": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Presence().Get(accountPresenceParameters);\n}",
    "listCallRecordings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Recording(recordingId).Get();\n}",
    "listCallRecordingData": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Recording(recordingId).Content().Get();\n}",
    "loadServiceInfo": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).ServiceInfo().Get();\n}",
    "createCallOutCallSession": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().CallOut().Post(makeCallOutRequest);\n}",
    "getCallSessionStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Get(getCallSessionStatusParameters);\n}",
    "deleteCallSession": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Delete();\n}",
    "getCallPartyStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Get();\n}",
    "updateCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Patch(partyUpdateRequest);\n}",
    "callFlipParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Flip().Post(callPartyFlip);\n}",
    "forwardCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Forward().Post(forwardTarget);\n}",
    "holdCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Hold().Post();\n}",
    "startCallRecording": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Recordings().Post();\n}",
    "pauseResumeCallRecording": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Recordings(recordingId).Patch(callRecordingUpdate, pauseResumeCallRecordingParameters);\n}",
    "rejectParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Reject().Post();\n}",
    "transferCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Transfer().Post(transferTarget);\n}",
    "unholdCallParty": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Parties(partyId).Unhold().Post();\n}",
    "superviseCallSession": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Telephony().Sessions(sessionId).Supervise().Post(superviseCallSessionRequest);\n}",
    "listTemplates": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Templates().List(listTemplatesParameters);\n}",
    "loadTemplate": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Account(accountId).Templates(templateId).Get();\n}",
    "createSipRegistration": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).ClientInfo().SipProvision().Post(createSipRegistrationRequest);\n}",
    "listCountries": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Country().List(listCountriesParameters);\n}",
    "loadCountry": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Country(countryId).Get();\n}",
    "listFaxCoverPages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().FaxCoverPage().Get(listFaxCoverPagesParameters);\n}",
    "listStandardGreetings": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Greeting().List(listStandardGreetingsParameters);\n}",
    "loadStandardGreeting": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Greeting(greetingId).Get();\n}",
    "listLanguages": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Language().List();\n}",
    "loadLanguage": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Language(languageId).Get();\n}",
    "listLocations": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Location().Get(listLocationsParameters);\n}",
    "listStates": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().State().List(listStatesParameters);\n}",
    "loadState": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().State(stateId).Get();\n}",
    "listTimezones": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Timezone().List(listTimezonesParameters);\n}",
    "loadTimezone": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Dictionary().Timezone(timezoneId).Get(loadTimezoneParameters);\n}",
    "createGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards().Post(glipMessageAttachmentInfoRequest, createGlipCardParameters);\n}",
    "loadGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards(cardId).Get();\n}",
    "updateGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards(cardId).Put(glipMessageAttachmentInfoRequest);\n}",
    "deleteGlipCard": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Cards(cardId).Delete();\n}",
    "listGlipChats": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats().List(listGlipChatsParameters);\n}",
    "loadGlipChat": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Get();\n}",
    "favoriteGlipChat": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Favorite().Post();\n}",
    "loadGlipPosts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts().List(loadGlipPostsParameters);\n}",
    "createGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts().Post(glipPostPostBody);\n}",
    "loadGlipPostByChatId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts(postId).Get();\n}",
    "updateGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts(postId).Patch(glipPatchPostBody);\n}",
    "deleteGlipPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Posts(postId).Delete();\n}",
    "markChatRead": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Read().Post();\n}",
    "unfavoriteGlipChat": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Unfavorite().Post();\n}",
    "markChatUnread": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Chats(chatId).Unread().Post();\n}",
    "loadGlipCompany": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Companies(companyId).Get();\n}",
    "listGlipConversations": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Conversations().List(listGlipConversationsParameters);\n}",
    "createGlipConversation": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Conversations().Post(createGlipConversationRequest);\n}",
    "loadGlipConversation": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Conversations(chatId).Get();\n}",
    "createDataExportTask": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().DataExport().Post(createDataExportTaskRequest);\n}",
    "loadDataExportTask": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().DataExport(taskId).Get();\n}",
    "getComplianceArchiveStream": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().DataExport(taskId).Archive(archiveId).Get();\n}",
    "loadGlipEvents": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events().List(loadGlipEventsParameters);\n}",
    "createEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events().Post(glipEventCreate);\n}",
    "loadEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events(eventId).Get();\n}",
    "updateEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events(eventId).Put(glipEventCreate);\n}",
    "deleteEvent": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Events(eventId).Delete();\n}",
    "loadGlipEveryone": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Everyone().Get();\n}",
    "updateGlipEveryone": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Everyone().Patch(updateGlipEveryoneRequest);\n}",
    "listFavoriteChats": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Favorites().Get(listFavoriteChatsParameters);\n}",
    "createGlipFile": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Files().Post(createGlipFileRequest, createGlipFileParameters);\n}",
    "listGlipGroups": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups().List(listGlipGroupsParameters);\n}",
    "createGlipGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups().Post(glipCreateGroup);\n}",
    "loadGlipGroup": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Get();\n}",
    "assignGlipGroupMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).BulkAssign().Post(editGroupRequest);\n}",
    "createEventbyGroupId": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Events().Post(glipEventCreate);\n}",
    "listGroupEvents": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Events().Get();\n}",
    "listGlipGroupPosts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Posts().Get(listGlipGroupPostsParameters);\n}",
    "createGlipGroupPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Posts().Post(glipCreatePost);\n}",
    "updateGlipPostText": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Posts(postId).Text().Put(string);\n}",
    "createGlipGroupWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Webhooks().Post();\n}",
    "listGlipGroupWebhooks": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Groups(groupId).Webhooks().Get();\n}",
    "loadGlipPerson": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Persons(personId).Get();\n}",
    "listGlipPosts": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Posts().Get(listGlipPostsParameters);\n}",
    "createPost": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Posts().Post(glipCreatePost);\n}",
    "loadGlipPreferences": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Preferences().Get();\n}",
    "listRecentChats": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Recent().Chats().Get(listRecentChatsParameters);\n}",
    "listGlipTeams": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams().List(listGlipTeamsParameters);\n}",
    "createGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams().Post(glipPostTeamBody);\n}",
    "loadGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Get();\n}",
    "updateGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Patch(glipPatchTeamBody);\n}",
    "deleteGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Delete();\n}",
    "addGlipTeamMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Add().Post(glipPostMembersListBody);\n}",
    "archiveGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Archive().Post();\n}",
    "joinGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Join().Post();\n}",
    "leaveGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Leave().Post();\n}",
    "removeGlipTeamMembers": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Remove().Post(glipPostMembersIdsListBody);\n}",
    "unarchiveGlipTeam": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Teams(chatId).Unarchive().Post();\n}",
    "listGlipWebhooks": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks().List();\n}",
    "loadGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Get();\n}",
    "deleteGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Delete();\n}",
    "activateGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Activate().Post();\n}",
    "suspendGlipWebhook": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Glip().Webhooks(webhookId).Suspend().Post();\n}",
    "parsePhoneNumber": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).NumberParser().Parse().Post(parsePhoneNumberRequest, parsePhoneNumberParameters);\n}",
    "numberPortingVerify": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).NumberPorting().VerifyNumber().Post(numberPortingVerifyNumberRequest);\n}",
    "loadAPIStatus": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Status().Get();\n}",
    "listSubscriptions": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription().List();\n}",
    "createSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription().Post(createSubscriptionRequest);\n}",
    "loadSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Get();\n}",
    "updateSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Put(modifySubscriptionRequest, updateSubscriptionParameters);\n}",
    "deleteSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Delete();\n}",
    "renewSubscription": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Restapi(apiVersion).Subscription(subscriptionId).Renew().Post();\n}",
    "getServiceProviderConfig2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).ServiceProviderConfig().Get();\n}",
    "searchViaGet2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users().List(searchViaGet2Parameters);\n}",
    "createUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users().Post(user);\n}",
    "searchViaPost2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users().DotSearch().Post(searchRequest);\n}",
    "getUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Get();\n}",
    "replaceUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Put(user);\n}",
    "deleteUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Delete();\n}",
    "patchUser2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Users(id).Patch(userPatch);\n}",
    "checkHealth2": "using (var rc = new RestClient(\"clientID\", \"clientSecret\", \"serverURL\"))\n{\n    await rc.Authorize(\"username\", \"extension\", \"password\");\n    var result = await rc.Scim(version).Health().Get();\n}"
  }
}